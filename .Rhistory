y <- banana[,3]
x
y
x <- as.matrix(x)
n <- length(y)
p <- ncol(x)
class_names <- as.character(unique(y))
class_pos <- names(which.min(table(y)))
class_neg <- class_names[class_names != class_pos]
x_pos <- x[y == class_pos,]
x_neg <- x[y == class_neg,]
n_pos <- nrow(x_pos)
n_neg <- nrow(x_neg)
imb_ratio <- n_neg/n_pos
n_new <- (n_neg - n_pos)
# synthetic data generation
i_new <- sample(1:n_pos, size = n_new, replace = TRUE)
x_pos[i_new,]
imb_ratio
rep(1:n_pos, ceiling(imb_ratio))
i_new <- rep(1:n_pos, ceiling(imb_ratio))
# exact balance
n_diff <- (n_new - length(i_new))
n_diff
i_new <- rep(1:n_pos, ceiling(imb_ratio) - 1)
# exact balance
n_diff <- (n_new - length(i_new))
n_diff
ii <- sample(1:n_pos, size = abs(n_diff))
C[ii] <- C[ii] + n_diff/abs(n_diff)
library(imbalance)
x <- banana[,1:2]
y <- banana[,3]
x
y
x <- as.matrix(x)
n <- length(y)
p <- ncol(x)
class_names <- as.character(unique(y))
class_pos <- names(which.min(table(y)))
class_neg <- class_names[class_names != class_pos]
x_pos <- x[y == class_pos,]
x_neg <- x[y == class_neg,]
n_pos <- nrow(x_pos)
n_neg <- nrow(x_neg)
imb_ratio <- n_neg/n_pos
n_new <- (n_neg - n_pos)
i_new <- rep(1:n_pos, ceiling(imb_ratio) - 1)
# exact balance
n_diff <- (n_new - length(i_new))
ii <- sample(1:n_pos, size = abs(n_diff))
C[ii] <- C[ii] + n_diff/abs(n_diff)
# synthetic data generation
i_new <- sample(1:n_pos, size = n_new, replace = TRUE)
library(imbalance)
x <- banana[,1:2]
y <- banana[,3]
x
y
x <- as.matrix(x)
n <- length(y)
p <- ncol(x)
class_names <- as.character(unique(y))
class_pos <- names(which.min(table(y)))
class_neg <- class_names[class_names != class_pos]
x_pos <- x[y == class_pos,]
x_neg <- x[y == class_neg,]
n_pos <- nrow(x_pos)
n_neg <- nrow(x_neg)
imb_ratio <- n_neg/n_pos
n_new <- (n_neg - n_pos)
i_new <- rep(1:n_pos, ceiling(imb_ratio) - 1)
# exact balance
n_diff <- (n_new - length(i_new))
ii <- sample(1:n_pos, size = abs(n_diff))
# synthetic data generation
i_new <- sample(1:n_pos, size = n_new, replace = TRUE)
x_pos[i_new,]
library(imbalance)
x <- banana[,1:2]
y <- banana[,3]
x
y
x <- as.matrix(x)
n <- length(y)
p <- ncol(x)
class_names <- as.character(unique(y))
class_pos <- names(which.min(table(y)))
class_neg <- class_names[class_names != class_pos]
x_pos <- x[y == class_pos,]
x_neg <- x[y == class_neg,]
n_pos <- nrow(x_pos)
n_neg <- nrow(x_neg)
imb_ratio <- n_neg/n_pos
n_new <- (n_neg - n_pos)
i_new <- rep(1:n_pos, ceiling(imb_ratio) - 1)
# exact balance
n_diff <- (n_new - length(i_new))
ii <- sample(1:n_pos, size = abs(n_diff))
# synthetic data generation
i_new <- sample(1:n_pos, size = n_new, replace = TRUE)
x_pos[i_new,]
x_pos[i_new,]
library(imbalance)
x <- banana[,1:2]
y <- banana[,3]
x
y
x <- as.matrix(x)
n <- length(y)
p <- ncol(x)
class_names <- as.character(unique(y))
class_pos <- names(which.min(table(y)))
class_neg <- class_names[class_names != class_pos]
x_pos <- x[y == class_pos,]
x_neg <- x[y == class_neg,]
n_pos <- nrow(x_pos)
n_neg <- nrow(x_neg)
imb_ratio <- n_neg/n_pos
n_new <- (n_neg - n_pos)
i_new <- rep(1:n_pos, ceiling(imb_ratio) - 1)
# exact balance
n_diff <- (n_new - length(i_new))
ii <- sample(1:n_pos, size = abs(n_diff))
# synthetic data generation
i_new <- sample(1:n_pos, size = n_new, replace = TRUE)
x_pos[i_new,]
library(imbalance)
x <- banana[,1:2]
y <- banana[,3]
x
y
x <- as.matrix(x)
n <- length(y)
p <- ncol(x)
class_names <- as.character(unique(y))
class_pos <- names(which.min(table(y)))
class_neg <- class_names[class_names != class_pos]
x_pos <- x[y == class_pos,]
x_neg <- x[y == class_neg,]
n_pos <- nrow(x_pos)
n_neg <- nrow(x_neg)
imb_ratio <- n_neg/n_pos
n_new <- (n_neg - n_pos)
i_new <- rep(1:n_pos, ceiling(imb_ratio) - 1)
# exact balance
n_diff <- (n_new - length(i_new))
ii <- sample(1:n_pos, size = abs(n_diff))
# synthetic data generation
i_new <- sample(1:n_pos, size = n_new, replace = TRUE)
x_pos[i_new,]
x_pos[i_new,]
i_new <- sample(1:n_pos, size = abs(n_diff))
i_new
i_new <- rep(1:n_pos, ceiling(imb_ratio) - 1)
# exact balance
n_diff <- (n_new - length(i_new))
sample(1:n_pos, n_diff)
i_diff <- sample(1:n_pos, n_diff)
n_diff <- n_diff + i_diff
i_diff
library(imbalance)
x <- banana[,1:2]
y <- banana[,3]
x
y
x <- as.matrix(x)
n <- length(y)
p <- ncol(x)
class_names <- as.character(unique(y))
class_pos <- names(which.min(table(y)))
class_neg <- class_names[class_names != class_pos]
x_pos <- x[y == class_pos,]
x_neg <- x[y == class_neg,]
n_pos <- nrow(x_pos)
n_neg <- nrow(x_neg)
imb_ratio <- n_neg/n_pos
n_new <- (n_neg - n_pos)
i_new <- rep(1:n_pos, ceiling(imb_ratio) - 1)
# exact balance
n_diff <- (n_new - length(i_new))
i_diff <- sample(1:n_pos, n_diff)
n_diff[i_diff] <- n_diff[i_diff] + n_diff/abs(n_diff)
x_new <- x_pos[i_new,]
library(imbalance)
x <- banana[,1:2]
y <- banana[,3]
x
y
x <- as.matrix(x)
n <- length(y)
p <- ncol(x)
class_names <- as.character(unique(y))
class_pos <- names(which.min(table(y)))
class_neg <- class_names[class_names != class_pos]
x_pos <- x[y == class_pos,]
x_neg <- x[y == class_neg,]
n_pos <- nrow(x_pos)
n_neg <- nrow(x_neg)
imb_ratio <- n_neg/n_pos
n_new <- (n_neg - n_pos)
i_new <- rep(1:n_pos, ceiling(imb_ratio) - 1)
# exact balance
n_diff <- (n_new - length(i_new))
i_diff <- sample(1:n_pos, n_diff)
n_diff[i_diff] <- n_diff[i_diff] + n_diff/abs(n_diff)
x_new <- x_pos[i_new,]
x_new <- rbind(
x_new,
x_pos,
x_neg
)
y_new <- c(
rep(class_pos, n_new + n_pos),
rep(class_neg, n_neg)
)
y_new <- factor(y_new, levels = levels(y), labels = levels(y))
return(list(
x_new = x_new,
y_new = y_new,
C = C
))
library(imbalance)
x <- banana[,1:2]
y <- banana[,3]
x
y
x <- as.matrix(x)
n <- length(y)
p <- ncol(x)
class_names <- as.character(unique(y))
class_pos <- names(which.min(table(y)))
class_neg <- class_names[class_names != class_pos]
x_pos <- x[y == class_pos,]
x_neg <- x[y == class_neg,]
n_pos <- nrow(x_pos)
n_neg <- nrow(x_neg)
imb_ratio <- n_neg/n_pos
n_new <- (n_neg - n_pos)
i_new <- rep(1:n_pos, ceiling(imb_ratio) - 1)
# exact balance
n_diff <- (n_new - length(i_new))
i_diff <- sample(1:n_pos, n_diff)
n_diff[i_diff] <- n_diff[i_diff] + n_diff/abs(n_diff)
x_new <- x_pos[i_new,]
x_new <- rbind(
x_new,
x_pos,
x_neg
)
y_new <- c(
rep(class_pos, n_new + n_pos),
rep(class_neg, n_neg)
)
y_new <- factor(y_new, levels = levels(y), labels = levels(y))
return(list(
x_new = x_new,
y_new = y_new
))
library(imbalance)
x <- banana[,1:2]
y <- banana[,3]
x
y
ROS <- function(x, y) {
x <- as.matrix(x)
n <- length(y)
p <- ncol(x)
class_names <- as.character(unique(y))
class_pos <- names(which.min(table(y)))
class_neg <- class_names[class_names != class_pos]
x_pos <- x[y == class_pos,]
x_neg <- x[y == class_neg,]
n_pos <- nrow(x_pos)
n_neg <- nrow(x_neg)
imb_ratio <- n_neg/n_pos
n_new <- (n_neg - n_pos)
i_new <- rep(1:n_pos, ceiling(imb_ratio) - 1)
# exact balance
n_diff <- (n_new - length(i_new))
i_diff <- sample(1:n_pos, n_diff)
n_diff[i_diff] <- n_diff[i_diff] + n_diff/abs(n_diff)
x_new <- x_pos[i_new,]
x_new <- rbind(
x_new,
x_pos,
x_neg
)
y_new <- c(
rep(class_pos, n_new + n_pos),
rep(class_neg, n_neg)
)
y_new <- factor(y_new, levels = levels(y), labels = levels(y))
return(list(
x_new = x_new,
y_new = y_new
))
}
ROS(x = x, y = y)
asd <- ROS(x = x, y = y)
plot(asd$x_new)
plot(asd$x_new, asd$y_new)
plot(asd$x_new, col = asd$y_new)
asd$y_new
table(asd$y_new)
library(imbalance)
x <- banana[,1:2]
y <- banana[,3]
x
y
ROS <- function(x, y) {
x <- as.matrix(x)
n <- length(y)
p <- ncol(x)
class_names <- as.character(unique(y))
class_pos <- names(which.min(table(y)))
class_neg <- class_names[class_names != class_pos]
x_pos <- x[y == class_pos,]
x_neg <- x[y == class_neg,]
n_pos <- nrow(x_pos)
n_neg <- nrow(x_neg)
imb_ratio <- n_neg/n_pos
n_new <- (n_neg - n_pos)
i_new <- rep(1:n_pos, ceiling(imb_ratio) - 1)
# exact balance
n_diff <- (n_new - length(i_new))
i_diff <- sample(1:n_pos, n_diff)
n_diff[i_diff] <- n_diff[i_diff] + n_diff/abs(n_diff)
x_new <- x_pos[i_new,]
x_new <- rbind(
x_new,
x_pos,
x_neg
)
y_new <- c(
rep(class_pos, n_new + n_pos),
rep(class_neg, n_neg)
)
y_new <- factor(y_new, levels = levels(y), labels = levels(y))
return(list(
x_new = x_new,
y_new = y_new
))
}
x <- as.matrix(x)
n <- length(y)
p <- ncol(x)
class_names <- as.character(unique(y))
class_pos <- names(which.min(table(y)))
class_neg <- class_names[class_names != class_pos]
x_pos <- x[y == class_pos,]
x_neg <- x[y == class_neg,]
n_pos <- nrow(x_pos)
n_neg <- nrow(x_neg)
imb_ratio <- n_neg/n_pos
n_new
n_new <- (n_neg - n_pos)
i_new <- rep(1:n_pos, ceiling(imb_ratio) - 1)
i_new
x <- as.matrix(x)
n <- length(y)
p <- ncol(x)
class_names <- as.character(unique(y))
class_pos <- names(which.min(table(y)))
class_neg <- class_names[class_names != class_pos]
x_pos <- x[y == class_pos,]
x_neg <- x[y == class_neg,]
n_pos <- nrow(x_pos)
n_neg <- nrow(x_neg)
imb_ratio <- n_neg/n_pos
n_new <- (n_neg - n_pos)
n_remove <- (n_neg - n_pos)
sample(1:n_neg, n_remove)
i_remove <- sample(1:n_neg, n_remove)
x_neg_new <- x_neg[-i_remove,]
x <- as.matrix(x)
n <- length(y)
p <- ncol(x)
class_names <- as.character(unique(y))
class_pos <- names(which.min(table(y)))
class_neg <- class_names[class_names != class_pos]
x_pos <- x[y == class_pos,]
x_neg <- x[y == class_neg,]
n_pos <- nrow(x_pos)
n_neg <- nrow(x_neg)
imb_ratio <- n_neg/n_pos
n_remove <- (n_neg - n_pos)
i_remove <- sample(1:n_neg, n_remove)
x_neg_new <- x_neg[-i_remove,]
x_new <- rbind(
x_pos,
x_neg_new
)
y_new <- c(
rep(class_pos, n_pos),
rep(class_neg, n_pos)
)
y_new <- factor(y_new, levels = levels(y), labels = levels(y))
return(list(
x_new = x_new,
y_new = y_new
))
#' @title  Random Undersampling (RUS)
#'
#' @description Resampling with RUS.
#'
#' @param x feature matrix.
#' @param y a factor class variable with two classes.
#'
#' @details
#' Random Undersampling (RUS) is a method of removing negative
#' samples untile balance is achieved.
#'
#' @return a list with resampled dataset.
#'  \item{x_new}{Resampled feature matrix.}
#'  \item{y_new}{Resampled target variable.}
#'
#' @author Fatih Saglam, saglamf@gmail.com
#'
#' @examples
#'
#' set.seed(1)
#' x <- rbind(matrix(rnorm(2000, 3, 1), ncol = 2, nrow = 1000),
#'            matrix(rnorm(100, 5, 1), ncol = 2, nrow = 50))
#' y <- as.factor(c(rep("negative", 1000), rep("positive", 50)))
#'
#' plot(x, col = y)
#'
#' # resampling
#' m <- RUS(x = x, y = y)
#'
#' plot(m$x_new, col = m$y_new)
#'
#'
#' @rdname RUS
#' @export
RUS <- function(x, y) {
x <- as.matrix(x)
n <- length(y)
p <- ncol(x)
class_names <- as.character(unique(y))
class_pos <- names(which.min(table(y)))
class_neg <- class_names[class_names != class_pos]
x_pos <- x[y == class_pos,]
x_neg <- x[y == class_neg,]
n_pos <- nrow(x_pos)
n_neg <- nrow(x_neg)
imb_ratio <- n_neg/n_pos
n_remove <- (n_neg - n_pos)
i_remove <- sample(1:n_neg, n_remove)
x_neg_new <- x_neg[-i_remove,]
x_new <- rbind(
x_pos,
x_neg_new
)
y_new <- c(
rep(class_pos, n_pos),
rep(class_neg, n_pos)
)
y_new <- factor(y_new, levels = levels(y), labels = levels(y))
return(list(
x_new = x_new,
y_new = y_new
))
}
devtools::document()
library(SMOTEWB)
devtools::build_manual()
rlang::last_error()
rlang::last_trace()
devtools::build()
devtools::build(manual = TRUE)
devtools::build(manual = TRUE)
devtools::build(manual = TRUE)
Sys.getenv("PATH")
Sys.getenv("PATH")
Sys.which("pdflatex")
devtools::build(manual = TRUE)
devtools::build(manual = TRUE)
Sys.which("pdflatex")
Sys.getenv("PATH")
Sys.which("pdflatex")
devtools::check_win_release()
devtools::build_readme()
usethis::browse_cran()
devtools::document()
devtools::build()
devtools::build(manual = TRUE)
devtools::build(vignettes = FALSE)
devtools::document()
library(SMOTEWB)
devtools::build()
devtools::document()
library(SMOTEWB)
devtools::build()
devtools::document()
devtools::document()
devtools::document()
library(SMOTEWB)
devtools::build()
devtools::document()
library(SMOTEWB)
devtools::build()
f(30)
factorial(30)
3^30
3^30/factorial(30)*(-exp(30))
3^30/factorial(30)*exp(-30)
exp(-30)
exp(30)
1/exp(30)
install.packages("uncertainty")
